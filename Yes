enum ledStates {RESTING, COUNTDOWN, COUNTDOWNTWO, COUNTDOWNTHREE, STROBE, COUNTUP, COUNTUPTWO, COUNTUPTHREE, STING};
enum ledStates ledState;
enum ledStates previousLedState = ledState;

unsigned long startMillis;
unsigned long currentMillis;


const byte keyPin = 2; // The switch is connected to pin number 2
int brightness = 0;
float velocity = 1.0;
int ledPin = 13;
int p = 0;
int plotFrequency = 3;
int buttonState = 0;


int pressTime = 0; // the counter that acounnt the pressing time
void setup() {
  pinMode(ledPin, OUTPUT);
  Serial.begin(115200);
  pinMode(keyPin, INPUT);
}
void loop() {
  compose();
  delay(10);
  analogWrite(ledPin,brightness);
  currentMillis = millis();
  byte key = digitalRead(keyPin);
  if (key == HIGH) { // that means the key is pressed
     pressTime++;
     delay(10); // works like a timer with one second steps
     if (pressTime <= 100){
      //Serial.println("Short click");
     }else {
        Serial.println("Long click");
        }
      }
  else if (key == LOW) {// key is not pressed
    Serial.println("Released");
    pressTime=0;
     }
   Serial.println(pressTime);
}

void compose() {
  switch (ledState) {


  case RESTING:
  plot("RESTING", brightness);
  brightness = sinewave(1400,50,20);
  if (currentMillis - startMillis >= 7000){
    changeState(COUNTDOWN);
  }
  break;

  case COUNTDOWN:
  plot("COUNTDOWN", brightness);
  brightness = sinewave(1000,200,20);
  if (currentMillis - startMillis >=1000){
    changeState(COUNTDOWNTWO);
  }
  break;

  case COUNTDOWNTWO:
  plot("COUNTDOWNTWO", brightness);
  brightness=sinewave(1000,200,20);
  if (currentMillis - startMillis >=1000){
    changeState(COUNTDOWNTHREE);
  }
break;

  case COUNTDOWNTHREE:
  plot("COUNTDOWNTWO", brightness);
  brightness=sinewave(1000,200,20);
  if (currentMillis - startMillis >=1000){
    changeState(STROBE);
  }
break;

  case STROBE:
  plot("STROBE", brightness);
  brightness = sinewave (300,200,20);
  if (currentMillis - startMillis >= 17000){
    changeState(COUNTUP);
  }
  else (pressTime >= 2000); {
        changeState(STING);
      }
     
  
  break;

  case STING:
  plot("STING", brightness);
  brightness = sinewave (700, 200, 20);
  if (currentMillis - startMillis >=2000){
    changeState(STROBE);
  }

  case COUNTUP:
  plot("COUNTUP", brightness);
  brightness = sinewave (1000, 200, 20);
  if (currentMillis - startMillis >=1000){
    changeState(COUNTUPTWO);
  }
  break;

  case COUNTUPTWO:
  plot("COUNTUPTWO", brightness);
  brightness = sinewave (1000, 200, 20);
  if (currentMillis - startMillis >=1000){
    changeState(COUNTUPTHREE);
  }
  break;

   case COUNTUPTHREE:
   plot("COUNTUPTHREE", brightness);
   brightness = sinewave (1000, 200, 20);
   if (currentMillis - startMillis >=1000){
    changeState(RESTING); 
   }
   break;
  }
}
void changeState(ledStates newState){
    // call to change state, will keep track of time since last state
    startMillis = millis();
    ledState = newState;
  }
  
void plot(char *state, int brightness){
    // use this function to plot a graph.
    // it will normalize the auto-scaling plotter

    if ((p % plotFrequency) == 0){
      Serial.print(state);
      Serial.print(", ");
      Serial.print(brightness);
      Serial.println(", 0, 300");
    }
    p++;
  }
  int sinewave(float duration, float amplitude, int offset){
    // Generate a sine oscillation, return a number.
    // In case you are using this for analogWrite, make sure the amplitude does not exceed 256
    float period = millis()/duration; // Duration in ms determines the wavelength.
    float midpoint = amplitude / 2; // set the midpoint of the wave at half the amplitude so there are no negative numbers
    int value = midpoint + midpoint * sin ( period * 2.0 * PI );
    value = value + offset; //offset allows you to move the wave up and down on the Y-axis. Should not exceed the value of amplitude to prevent clipping.
    return value;
  }
